package com.example.auth_service.service;

import com.example.auth_service.dtos.request.OtpSendRequest;
import com.example.auth_service.dtos.request.VerifyOtpRequest;
import com.example.auth_service.dtos.response.GeneralStatus;
import com.example.auth_service.dtos.response.OtpSendResponse;
import com.example.auth_service.dtos.response.RegisterResponse;
import com.example.auth_service.dtos.response.VerifyOtpResponse;
import com.example.auth_service.model.OtpToken;
import com.example.auth_service.model.User;
import com.example.auth_service.repositories.OtpTokenRepository;
import com.example.auth_service.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Date;
import java.util.Optional;
import java.util.Random;

@Service
public class OtpService {
    private final OtpTokenRepository otpTokenRepository;
    private final Random random = new Random();


    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;
    @Autowired
    private EmailService emailService;
    @Autowired
    private ResponseService responseService;

    public OtpService(OtpTokenRepository otpTokenRepository) {
        this.otpTokenRepository = otpTokenRepository;
    }

    //  T·∫°o OTP m·ªõi
    public OtpSendResponse generateOtp(OtpSendRequest emailRequest)  {
        String email = emailRequest.getEmail();
        if (email == null || email.trim().isEmpty()) {
            GeneralStatus status = new GeneralStatus("01", true);
            status.setDisplayMessage("Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
            status.setResponseTime(new Date());
            return new OtpSendResponse(status , null);
        }
        Optional<User> emailUser = userRepository.findByEmail(email);
        if (emailUser.isEmpty()) {
            GeneralStatus status = new GeneralStatus("02", true);
            status.setDisplayMessage("Email ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω");
            status.setResponseTime(new Date());
            return new OtpSendResponse(status , null);
        }
        otpTokenRepository.deleteByEmail(email); // N·∫øu ch∆∞a c√≥ method n√†y, s·∫Ω l·ªói

        String otp = String.format("%06d", random.nextInt(1000000));
        LocalDateTime expiryTime = LocalDateTime.now().plusMinutes(5);

        String subject = "M√£ OTP c·ªßa b·∫°n";
        String body = String.format("""
    <div style="font-family: Arial, sans-serif; padding: 20px; background-color: #f9f9f9; border-radius: 10px; max-width: 500px; margin: auto; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
        <h2 style="color: #4CAF50; text-align: center;">X√°c th·ª±c OTP</h2>
        <p style="font-size: 16px;">Xin ch√†o,</p>
        <p style="font-size: 16px;">M√£ OTP c·ªßa b·∫°n l√†:</p>
        <p style="font-size: 24px; font-weight: bold; color: #e91e63; text-align: center;">%s</p>
        <p style="font-size: 14px; color: #555;">M√£ n√†y c√≥ hi·ªáu l·ª±c trong <b>5 ph√∫t</b>. Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.</p>
        <hr style="margin-top: 20px; margin-bottom: 20px;">
        <p style="font-size: 12px; color: #999; text-align: center;">N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
    </div>
    """, otp);

        // G·ª≠i email
        emailService.sendEmail(email, subject, body);

        // L∆∞u l·∫°i OTP
        OtpToken otpToken = new OtpToken();
        otpToken.setEmail(email); // üëà PH·∫¢I c√≥ d√≤ng n√†y
        otpToken.setOtp(otp);
        otpToken.setExpiryTime(LocalDateTime.now().plusMinutes(5));
        otpToken.setCreatedAt(LocalDateTime.now());
        otpToken.setUpdatedAt(LocalDateTime.now());


        try {
            otpTokenRepository.save(otpToken);
        }catch (Exception e){
            e.printStackTrace();
        }


        GeneralStatus status = new GeneralStatus("00", true);
        status.setDisplayMessage("otp ƒë√£ g·ª≠i qua gmail c·ªßa b·∫°n");
        status.setResponseTime(new Date());
        return new OtpSendResponse(status ,otp);
    }


    //  Ki·ªÉm tra OTP
    public boolean verifyOtp(String email, String otp) {

        Optional<OtpToken> otpTokenOptional = otpTokenRepository.findByEmail(email);
        if (otpTokenOptional.isPresent()) {
            OtpToken otpToken = otpTokenOptional.get();
            if (!otpToken.isExpired() && otpToken.getOtp().equals(otp)) {
                return true;
            }
        }
        return false;
    }




}
